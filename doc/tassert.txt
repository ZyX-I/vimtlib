*tAssert.txt*           Simple Assertions & Logging
                        Thomas Link (micathom AT gmail com?subject=vim)


This plugin defines a command |:TAssert| that takes an expression as 
argument and throws an exception if this expression evaluates to 
|empty()|. You can insert these comments throughout your code whenever 
something could potentially go wrong. The exception is then thrown right 
where the problem occurs.

To some extent you can also write some sort of primitive "unit" tests 
(ie scripts testing other scripts). Three commands are provided to 
facilitate this process: |:TAssertBegin| can be used to set a log 
message and the script context, |:TAssertEnd| to remove temporary 
variables and functions.

Unit tests should be run with the |:TAssertRun| command, which enables 
integration with the vim's quickfix list. Unit test scripts must not 
run other unit tests by sourcing them.

NOTE: Integration with the quickfix list requires tlib (vimscript#1863) 
to be installed.


                                                    *g:TASSERT*
In order to minimize the speed penalty, these assertions are only 
evaluated when g:TASSERT is non-null. Otherwise assertions are fully 
ignored. You can also use |:TAssertComment| to comment all assertions in 
the current file.

When changing the value of g:TASSERT, you have to reload the plugin to 
make this change effective. This is automatically done by using the 
convenience commands listed below.

                                                    *tAssert-logging*
Logging:
Logging is done by |:TLog|.
                                                    *g:TLOG*
The variable g:TLOG can have the following values:

    echom ... Print messages in the echo area.
    file  ... Print messages to a file; syntax "file:FILENAME"
    Decho ... Print messages via Decho (vimscript#642)

This affects the commands TAssertBegin! and TAssert! with the |<bang>|.


                                                    *tAssert-examples*
Examples: >
    TAssertBegin "General"
    fun! <SID>TestFunction(a, b)
        return a:a + a:b
    endf
    TAssert 0 == 0
    TAssert "bla" == "bla"
    TAssert IsNumber(1)
    TAssert IsString("foo")
    TAssert IsFuncref(function('IsFuncref'))
    TAssert IsList([1,2,3])
    TAssert IsDictionary({1:2})
    TAssert !IsNumber("Foo")
    TAssert !IsString(1)
    TAssert !IsFuncref({1:2})
    TAssert !IsList(function('IsFuncref'))
    TAssert !IsDictionary([1,2,3])
    TAssert DoRaise('0 + [1]') =~ ':E745:'
    TAssert <SID>TestFunction(1, 2) == 3
    TAssertEnd var varl vard

    TAssertBegin "Switching context", '.\{-}/plugin/00tAssert.vim'
    TAssert <SID>Test(1) == 2
    TAssertEnd


                                                    *tAssert-install*
Install:
Edit the vba file and type: >

    :so %

See :help vimball for details. If you have difficulties or use vim 7.0, 
please make sure, you have the current version of vimball (vimscript 
#1502) installed.


                                                    *tAssert-redistribute*
Compatibility:
If you want to redistribute files containing assertions but don't want 
to have people install this plugin, insert this close to the top of 
your file: >

    if exists(':TAssert')
        exec TAssertInit()
    else
        command! -nargs=* -bang TAssert :
        command! -nargs=* -bang TAssertBegin :
        command! -nargs=* -bang TAssertEnd :
    endif

Alternatively, use the |:TAssertComment| command.


========================================================================
Contents~

        :TAssert ............... |:TAssert|
        :TAssertOn ............. |:TAssertOn|
        :TAssertOff ............ |:TAssertOff|
        :TAssertComment ........ |:TAssertComment|
        :TAssertUncomment ...... |:TAssertUncomment|
        :TLog .................. |:TLog|
        :TLogTODO .............. |:TLogTODO|
        :TLogDBG ............... |:TLogDBG|
        :TLogStyle ............. |:TLogStyle|
        :TLogVAR ............... |:TLogVAR|
        :TLogOn ................ |:TLogOn|
        :TLogOff ............... |:TLogOff|
        :TLogBufferOn .......... |:TLogBufferOn|
        :TLogBufferOff ......... |:TLogBufferOff|
        :TLogComment ........... |:TLogComment|
        :TLogUncomment ......... |:TLogUncomment|


========================================================================
plugin/07tassert.vim~

                                                    *:TAssert*
TAssert[!] {expr}
    Test that an expression doesn't evaluate to something |empty()|. 
    If used after a |:TAssertBegin| command, any occurrences of 
    "<SID>" in the expression is replaced with the current script's 
    |<SNR>|. With [!] failures are logged according to the setting of 
    |g:tAssertLog|.

                                                    *:TAssertOn*
:TAssertOn
    Switch assertions on and reload the plugin.

                                                    *:TAssertOff*
:TAssertOff
    Switch assertions off and reload the plugin.

                                                    *:TAssertComment*
:TAssertComment
    Comment TAssert* commands and all lines between a TAssertBegin 
    and a TAssertEnd command.

                                                    *:TAssertUncomment*
:TAssertUncomment
    Uncomment TAssert* commands and all lines between a TAssertBegin 
    and a TAssertEnd command.


========================================================================
plugin/05tlog.vim~

                                                    *:TLog*
:TLog

                                                    *:TLogTODO*
:TLogTODO

                                                    *:TLogDBG*
:TLogDBG

                                                    *:TLogStyle*
:TLogStyle

                                                    *:TLogVAR*
:TLogVAR

                                                    *:TLogOn*
:TLogOn

                                                    *:TLogOff*
:TLogOff

                                                    *:TLogBufferOn*
:TLogBufferOn

                                                    *:TLogBufferOff*
:TLogBufferOff

                                                    *:TLogComment*
:TLogComment

                                                    *:TLogUncomment*
:TLogUncomment




vim:tw=78:fo=tcq2:isk=!-~,^*,^|,^":ts=8:ft=help:norl:
