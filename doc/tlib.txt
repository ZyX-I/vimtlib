*tlib.txt*  tlib -- A library of vim functions
            Author: Tom Link, micathom at gmail com


This library provides some utility functions. There isn't much need to 
install it unless another plugin requires you to do so.

Most of the library is included in autoload files. No autocommands are 
created. With the exception of loading ../plugin/02tlib.vim at startup 
the library has no impact on startup time or anything else.

The change-log is included at the bottom of ../plugin/02tlib.vim
(move the cursor over the file name and type gfG)


-----------------------------------------------------------------------
Install~

Edit the vba file and type: >

    :so %

See :help vimball for details. If you have difficulties, please make 
sure, you have the current version of vimball (vimscript #1502) 
installed.


========================================================================
Contents~

        :TRequire ............................... |:TRequire|
        :TLet ................................... |:TLet|
        :TScratch ............................... |:TScratch|
        :TVarArg ................................ |:TVarArg|
        :TKeyArg ................................ |:TKeyArg|
        :TBrowseOutput .......................... |:TBrowseOutput|
        g:tlib_pick_last_item ................... |g:tlib_pick_last_item|
        g:tlib_sortprefs_threshold .............. |g:tlib_sortprefs_threshold|
        g:tlib_scratch_pos ...................... |g:tlib_scratch_pos|
        g:tlib_inputlist_pct .................... |g:tlib_inputlist_pct|
        g:tlib_inputlist_width_filename ......... |g:tlib_inputlist_width_filename|
        g:tlib_inputlist_higroup ................ |g:tlib_inputlist_higroup|
        g:tlib_inputlist_livesearch_threshold ... |g:tlib_inputlist_livesearch_threshold|
        g:tlib_inputlist_filename_indicators .... |g:tlib_inputlist_filename_indicators|
        g:tlib_inputlist_match .................. |g:tlib_inputlist_match|
        g:tlib_inputlist_shortmessage ........... |g:tlib_inputlist_shortmessage|
        g:tlib_tags_extra ....................... |g:tlib_tags_extra|
        g:tlib_tag_substitute ................... |g:tlib_tag_substitute|
        g:tlib_filename_sep ..................... |g:tlib_filename_sep|
        g:tlib_cache ............................ |g:tlib_cache|
        g:tlib_viewline_position ................ |g:tlib_viewline_position|
        g:tlib_inputlist_and .................... |g:tlib_inputlist_and|
        g:tlib_inputlist_or ..................... |g:tlib_inputlist_or|
        g:tlib_inputlist_not .................... |g:tlib_inputlist_not|
        g:tlib_numeric_chars .................... |g:tlib_numeric_chars|
        g:tlib_keyagents_InputList_s ............ |g:tlib_keyagents_InputList_s|
        g:tlib_scroll_lines ..................... |g:tlib_scroll_lines|
        g:tlib_keyagents_InputList_m ............ |g:tlib_keyagents_InputList_m|
        g:tlib_handlers_EditList ................ |g:tlib_handlers_EditList|


========================================================================
plugin/02tlib.vim~

                                                    *:TRequire*
TRequire NAME [VERSION [FILE]]
    Make a certain vim file is loaded.
    
    Conventions: If FILE isn't defined, plugin/NAME.vim is loaded. The 
    file must provide a variable loaded_{NAME} that represents the version 
    number.

                                                    *:TLet*
:TLet VAR = VALUE
    Set a variable only if it doesn't already exist.
    EXAMPLES: >
      TLet foo = 1
      TLet foo = 2
      echo foo
      => 1
<

                                                    *:TScratch*
:TScratch
    Open a scratch buffer (a buffer without a file).
      TScratch  ... use split window
      TScratch! ... use the whole frame
    This command takes an (inner) dictionnary as optional argument.
    EXAMPLES: >
      TScratch 'scratch': '__FOO__'
      => Open a scratch buffer named __FOO__
<

                                                    *:TVarArg*
:TVarArg VAR1, [VAR2, DEFAULT2] ...
    A convenience wrapper for |tlib#arg#Let|.
    EXAMPLES: >
      function! Foo(...)
          TVarArg ['a', 1], 'b'
          echo 'a='. a
          echo 'b='. b
      endf
<

                                                    *:TKeyArg*
:TKeyArg DICT, VAR1, [VAR2, DEFAULT2] ...
    A convenience wrapper for |tlib#arg#Let|.
    EXAMPLES: >
      function! Foo(keyargs)
          TKeyArg a:keyargs, ['a', 1], 'b'
          echo 'a='. a
          echo 'b='. b
      endf
<

                                                    *:TBrowseOutput*
TBrowseOutput COMMAND
    Ever wondered how to effciently browse the output of a command 
    without redirecting it to a file? This command takes a command as 
    argument and presents the output via |tlib#input#List()| so that you 
    can easily search for a keyword (e.g. the name of a variable or 
    function) and the like.
    
    If you press enter, the selected line will be copied to the command 
    line. Press ESC to cancel browsing.
    
    EXAMPLES: >
      TBrowseOutput 20verb TeaseTheCulprit
<

                                                    *g:tlib_pick_last_item*
g:tlib_pick_last_item          (default: 1)
    When 1, automatically select a the last remaining item after applying 
    any filters.

                                                    *g:tlib_sortprefs_threshold*
g:tlib_sortprefs_threshold     (default: 200)
    If a list is bigger than this value, don't try to be smart when 
    selecting an item. Be slightly faster instead.

                                                    *g:tlib_scratch_pos*
g:tlib_scratch_pos             (default: 'botright')
    Scratch window position

                                                    *g:tlib_inputlist_pct*
g:tlib_inputlist_pct           (default: 70)
    Size of the input list window (in percent) from the main size (of &lines).

                                                    *g:tlib_inputlist_width_filename*
g:tlib_inputlist_width_filename (default: '&co / 3')
    Size of filename columns when listing filenames

                                                    *g:tlib_inputlist_higroup*
g:tlib_inputlist_higroup       (default: 'IncSearch')
    The highlight group to use for showing matches in the input list window.

                                                    *g:tlib_inputlist_livesearch_threshold*
g:tlib_inputlist_livesearch_threshold (default: 500)
    If a list contains more items, don't do an incremental "live search", 
    but use |input()| the quere the user for a filter. This is useful on 
    slower machines or with very long lists.

                                                    *g:tlib_inputlist_filename_indicators*
g:tlib_inputlist_filename_indicators (default: 0)
    If true, show some indicators about the status of a filename (eg 
    buflisted(), bufloaded() etc.).
    This is disabled by default because vim checks also for the file on 
    disk when doing this.

                                                    *g:tlib_inputlist_match*
g:tlib_inputlist_match         (default: 'cnf')
    Can be "cnf" or "fuzzy".
      cnf   :: substrings
      fuzzy :: match characters

                                                    *g:tlib_inputlist_shortmessage*
g:tlib_inputlist_shortmessage  (default: 0)
    If non null, display only a short info about the filter.

                                                    *g:tlib_tags_extra*
g:tlib_tags_extra              (default: '')
    Extra tags for |tlib#tag#Retrieve()| (see there). Can also be buffer-local.

                                                    *g:tlib_tag_substitute*
g:tlib_tag_substitute
    Filter the tag description through |substitute()| for these filetypes. 
    This applies only if the tag cmd field (see |taglist()|) is used.

                                                    *g:tlib_filename_sep*
g:tlib_filename_sep            (default: '/')

                                                    *g:tlib_cache*
g:tlib_cache                   (default: '')
    The cache directory. If empty, use |tlib#dir#MyRuntime|.'/cache'.
    You might want to delete old files from this directory from time to 
    time with a command like: >
      find ~/vimfiles/cache/ -atime +31 -type f -print -delete
<

                                                    *g:tlib_viewline_position*
g:tlib_viewline_position       (default: 'zz')
    Where to display the line when using |tlib#buffer#ViewLine|.
    For possible values for position see |scroll-cursor|.


Keys for |tlib#input#List|~

                                                    *g:tlib_inputlist_and*
g:tlib_inputlist_and           (default: ' ')

                                                    *g:tlib_inputlist_or*
g:tlib_inputlist_or            (default: '|')

                                                    *g:tlib_inputlist_not*
g:tlib_inputlist_not           (default: '-')

                                                    *g:tlib_numeric_chars*
g:tlib_numeric_chars
    When editing a list with |tlib#input#List|, typing these numeric chars 
    (as returned by getchar()) will select an item based on its index, not 
    based on its name. I.e. in the default setting, typing a "4" will 
    select the fourth item, not the item called "4".
    In order to make keys 0-9 filter the items in the list and make 
    <m-[0-9]> select an item by its index, remove the keys 48 to 57 from 
    this dictionary.
    Format: [KEY] = BASE ... the number is calculated as KEY - BASE.

                                                    *g:tlib_keyagents_InputList_s*
g:tlib_keyagents_InputList_s

                                                    *g:tlib_scroll_lines*
g:tlib_scroll_lines            (default: 10)
    Number of items to move when pressing <c-up/down> in the input list window.

                                                    *g:tlib_keyagents_InputList_m*
g:tlib_keyagents_InputList_m

                                                    *g:tlib_handlers_EditList*
g:tlib_handlers_EditList



vim:tw=78:fo=tcq2:isk=!-~,^*,^|,^":ts=8:ft=help:norl:
